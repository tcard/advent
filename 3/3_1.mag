// --- Day 3: No Matter How You Slice It ---

// The Elves managed to locate the chimney-squeeze prototype fabric for Santa's
// suit (thanks to someone who helpfully wrote its box IDs on the wall of the
// warehouse in the middle of the night). Unfortunately, anomalies are still
// affecting them - nobody can even agree on how to cut the fabric.

// The whole piece of fabric they're working on is a very large square - at
// least 1000 inches on each side.

// Each Elf has made a claim about which area of fabric would be ideal for
// Santa's suit. All claims have an ID and consist of a single rectangle with
// edges parallel to the edges of the fabric. Each claim's rectangle is defined
// as follows:

// - The number of inches between the left edge of the fabric and the left edge
//   of the rectangle.
// - The number of inches between the top edge of the fabric and the top edge of
//   the rectangle.
// - The width of the rectangle in inches.
// - The height of the rectangle in inches.

// A claim like #123 @ 3,2: 5x4 means that claim ID 123 specifies a rectangle 3
// inches from the left edge, 2 inches from the top edge, 5 inches wide, and 4
// inches tall. Visually, it claims the square inches of fabric represented by #
// (and ignores the square inches of fabric represented by .) in the diagram
// below:

// ...........
// ...........
// ...#####...
// ...#####...
// ...#####...
// ...#####...
// ...........
// ...........
// ...........

// The problem is that many of the claims overlap, causing two or more claims to
// cover part of the same areas. For example, consider the following claims:

// #1 @ 1,3: 4x4
// #2 @ 3,1: 4x4
// #3 @ 5,5: 2x2

// Visually, these claim the following areas:

// ........
// ...2222.
// ...2222.
// .11XX22.
// .11XX22.
// .111133.
// .111133.
// ........

// The four square inches marked with X are claimed by both 1 and 2. (Claim 3,
// while adjacent to the others, does not overlap either of them.)

// If the Elves all proceed with their own plans, none of them will have enough
// fabric. How many square inches of fabric are within two or more claims?

import io
import regex

defclass Fabric
  val claims
  val width
end

def (== Fabric) new(width: width, height: height)
  Fabric new(
    claims: List new(fill: 0, size: width * height),
    width: width)
end

def (this is Fabric) i(top: top, left: left)
  top * (this width) + left
end

def (this is Fabric) add(top: top, left: left, width: width, height: height)
  for t in top until(top + height) do
    for l in left until(left + width)  do
      val i = this i(top: t, left: l)
      (this claims)[i] = (this claims)[i] + 1
    end
  end
end

val stdin = open("/dev/stdin")

def getLine()
  stdin readLine
end

def (== Int) parse(s is String)
  var all = 0
  for c in s do
    val i = match c
      case "0" then 0
      case "1" then 1
      case "2" then 2
      case "3" then 3
      case "4" then 4
      case "5" then 5
      case "6" then 6
      case "7" then 7
      case "8" then 8
      case "9" then 9
    end
    all = all * 10 + i
  end
  all
end

def (this is Fabric) howManyOverlappingClaims
  var c = 0
  for i in this claims do
    if i > 1 then
      c = c + 1
    end
  end
  c
end

val r = regex("#[0-9]+ @ ([0-9]+),([0-9]+): ([0-9]+)x([0-9]+)")

val fabric = Fabric new(width: 1000, height: 1000)

while true do
  val line = match getLine()
    case is Nothing then break
    case x then x
  end
  val groups = line find(r) groups
  fabric add(
    left: Int parse(groups[1]),
    top: Int parse(groups[2]),
    width: Int parse(groups[3]),
    height: Int parse(groups[4]))
end

print(fabric howManyOverlappingClaims)
